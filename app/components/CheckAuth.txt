'use client'
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react"

export default function CheckAuth(){
    const router = useRouter()
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null; // Если куки нет
    }
    function fetchUserData() {
        const token = getCookie('token'); // Получаем токен из куки
        if(token){
            return fetch('/api/login', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
            })
            .then((response) => {
                if (response.status == 200) { 
                    router.push('/dashboard')
                } else{
                    router.push('/')
                }
            })
        }else{
            router.push('/')
        }
    }
    useEffect(()=>{
        fetchUserData()
    }, [])
}
export function CheckAuthDashboard(){
    const router = useRouter()
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null; // Если куки нет
    }
    function fetchUserDataDashboard() {
        const token = getCookie('token'); // Получаем токен из куки
        if(token){
            return fetch('/api/login', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
            })
            .then((response) => {
                if (response.status != 200) { 
                    router.push('/')
                }
            })
        }else{
            router.push('/')
        }
    }
    useEffect(()=>{
        fetchUserDataDashboard()
    }, [])
}